package:
  name: py3-wrapt
  version: 1.16.0
  epoch: 3
  description: Module for decorators, wrappers and monkey patching.
  copyright:
    - license: BSD-3-Clause
  dependencies:
    provider-priority: "0"

vars:
  module_name: wrapt
  pypi-package: wrapt

data:
  - name: py-versions
    items:
      "3.10": "310"
      "3.11": "311"
      "3.12": "312"
      "3.13": "300"

environment:
  contents:
    packages:
      - build-base
      - busybox
      - ca-certificates-bundle
      - py3-supported-pip
      - py3-supported-setuptools
      - wolfi-base

pipeline:
  - uses: git-checkout
    with:
      repository: https://github.com/GrahamDumpleton/wrapt
      tag: ${{package.version}}
      expected-commit: 14ac73e28b2e8b330443e1d31c4a1d226329babc

subpackages:
  - range: py-versions
    name: py${{range.key}}-${{vars.pypi-package}}
    pipeline:
      - name: Python Build
        uses: py/pip-build-install
        with:
          python: python${{range.key}}
    dependencies:
      provides:
        - py3-${{vars.pypi-package}}
      provider-priority: ${{range.value}}
    test:
      pipeline:
        - name: Import Test
          uses: python/import
          with:
            import: ${{vars.module_name}}
            python: python${{range.key}}

update:
  enabled: true
  github:
    identifier: GrahamDumpleton/wrapt
    strip-prefix: wrapt-

test:
  environment:
    contents:
      packages:
        - python-3
  pipeline:
    - name: Import Test
      uses: python/import
      with:
        import: ${{vars.module_name}}
    - name: Test decorator functionality
      runs: |
        # Create a simple decorator using wrapt
        echo '
        import wrapt

        # Define a decorator that prints messages before and after the function execution
        @wrapt.decorator
        def my_decorator(wrapped, instance, args, kwargs):
            print(f"Before function")
            result = wrapped(*args, **kwargs)  # Call the decorated function
            print(f"After function")
            return result

        # Apply the decorator to a sample function
        @my_decorator
        def sample_function():
            print("Function body")  # This is the body of the function

        # Call the decorated function
        sample_function()
        ' > test_wrapt.py

        # Check that the decorator correctly prints "Before function"
        python3 test_wrapt.py | grep "Before function" || exit 1
        # Check that the function body prints correctly
        python3 test_wrapt.py | grep "Function body" || exit 1
        # Check that the decorator correctly prints "After function"
        python3 test_wrapt.py | grep "After function" || exit 1
