diff --git a/backend/src/agent/persistence/worker/persistence_worker_test.go b/backend/src/agent/persistence/worker/persistence_worker_test.go
index bde3ef7e4..e2df781ba 100644
--- a/backend/src/agent/persistence/worker/persistence_worker_test.go
+++ b/backend/src/agent/persistence/worker/persistence_worker_test.go
@@ -35,8 +35,9 @@ func NewFakeEventHandler() *FakeEventHandler {
 	return &FakeEventHandler{}
 }
 
-func (h *FakeEventHandler) AddEventHandler(handler cache.ResourceEventHandler) {
+func (h *FakeEventHandler) AddEventHandler(handler cache.ResourceEventHandler) (cache.ResourceEventHandlerRegistration, error) {
 	h.handler = handler
+	return nil, nil
 }
 
 func TestPersistenceWorker_Success(t *testing.T) {
@@ -65,7 +66,7 @@ func TestPersistenceWorker_Success(t *testing.T) {
 		saver)
 
 	// Test
-	eventHandler.handler.OnAdd(workflow)
+	eventHandler.handler.OnAdd(workflow, false)
 	worker.processNextWorkItem()
 	assert.Equal(t, workflow, pipelineClient.GetWorkflow("MY_NAMESPACE", "MY_NAME"))
 	assert.Equal(t, 0, worker.Len())
@@ -95,7 +96,7 @@ func TestPersistenceWorker_NotFoundError(t *testing.T) {
 		saver)
 
 	// Test
-	eventHandler.handler.OnAdd(workflow)
+	eventHandler.handler.OnAdd(workflow, false)
 	worker.processNextWorkItem()
 	assert.Nil(t, pipelineClient.GetWorkflow("MY_NAMESPACE", "MY_NAME"))
 	assert.Equal(t, 0, worker.Len())
@@ -126,7 +127,7 @@ func TestPersistenceWorker_GetWorklowError(t *testing.T) {
 		saver)
 
 	// Test
-	eventHandler.handler.OnAdd(workflow)
+	eventHandler.handler.OnAdd(workflow, false)
 	worker.processNextWorkItem()
 	assert.Nil(t, pipelineClient.GetWorkflow("MY_NAMESPACE", "MY_NAME"))
 	assert.Equal(t, 1, worker.Len())
@@ -160,7 +161,7 @@ func TestPersistenceWorker_ReportWorkflowRetryableError(t *testing.T) {
 		saver)
 
 	// Test
-	eventHandler.handler.OnAdd(workflow)
+	eventHandler.handler.OnAdd(workflow, false)
 	worker.processNextWorkItem()
 	assert.Nil(t, pipelineClient.GetWorkflow("MY_NAMESPACE", "MY_NAME"))
 	assert.Equal(t, 1, worker.Len())
@@ -193,7 +194,7 @@ func TestPersistenceWorker_ReportWorkflowNonRetryableError(t *testing.T) {
 		saver)
 
 	// Test
-	eventHandler.handler.OnAdd(workflow)
+	eventHandler.handler.OnAdd(workflow, false)
 	worker.processNextWorkItem()
 	assert.Nil(t, pipelineClient.GetWorkflow("MY_NAMESPACE", "MY_NAME"))
 	assert.Equal(t, 0, worker.Len())
diff --git a/backend/src/common/util/execution_client.go b/backend/src/common/util/execution_client.go
index 25d1a315a..739974360 100644
--- a/backend/src/common/util/execution_client.go
+++ b/backend/src/common/util/execution_client.go
@@ -45,7 +45,7 @@ type ExecutionClient interface {
 // ExecutionInformerEventHandler only has AddEventHandler function
 // ExecutionInformer has all functions we need in current code base
 type ExecutionInformerEventHandler interface {
-	AddEventHandler(funcs cache.ResourceEventHandler)
+	AddEventHandler(funcs cache.ResourceEventHandler) (cache.ResourceEventHandlerRegistration, error)
 }
 type ExecutionInformer interface {
 	ExecutionInformerEventHandler
diff --git a/backend/src/common/util/pipelinerun.go b/backend/src/common/util/pipelinerun.go
index 709837edc..27dd03ddb 100644
--- a/backend/src/common/util/pipelinerun.go
+++ b/backend/src/common/util/pipelinerun.go
@@ -870,8 +870,8 @@ type PipelineRunInformer struct {
 	factory   prsinformers.SharedInformerFactory
 }
 
-func (pri *PipelineRunInformer) AddEventHandler(funcs cache.ResourceEventHandler) {
-	pri.informer.Informer().AddEventHandler(funcs)
+func (pri *PipelineRunInformer) AddEventHandler(funcs cache.ResourceEventHandler) (cache.ResourceEventHandlerRegistration, error) {
+	return pri.informer.Informer().AddEventHandler(funcs)
 }
 
 func (pri *PipelineRunInformer) HasSynced() func() bool {
diff --git a/backend/src/common/util/workflow.go b/backend/src/common/util/workflow.go
index 7f3015350..61c5e6e9f 100644
--- a/backend/src/common/util/workflow.go
+++ b/backend/src/common/util/workflow.go
@@ -899,8 +899,8 @@ type WorkflowInformer struct {
 	factory  argoinformer.SharedInformerFactory
 }
 
-func (wfi *WorkflowInformer) AddEventHandler(funcs cache.ResourceEventHandler) {
-	wfi.informer.Informer().AddEventHandler(funcs)
+func (wfi *WorkflowInformer) AddEventHandler(funcs cache.ResourceEventHandler) (cache.ResourceEventHandlerRegistration, error) {
+	return wfi.informer.Informer().AddEventHandler(funcs)
 }
 
 func (wfi *WorkflowInformer) HasSynced() func() bool {
